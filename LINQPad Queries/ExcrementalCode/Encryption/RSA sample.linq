<Query Kind="Program">
  <Reference>&lt;RuntimeDirectory&gt;\System.Security.Cryptography.Algorithms.dll</Reference>
  <Namespace>System.Security.Cryptography</Namespace>
</Query>

void Main()
{
	/* Keys were generated by following commands. I don't understand why one is a subject public key and the other is an RSA private key
	  # using 4096 to be able to encrypt larger objects, RSA is not meant for large text encryption, I don't care right now
	  # generate private key - 
	  openssl genrsa -out test.rsa.private 4096 
	  
	  # generate public key 
	  openssl rsa -in .\test.rsa.private -out test.rsa.public -pubout -outform PEM 
	 */
	
	//var mockSerialized = "{ 'Practice': 'Alpha' }";
	var mockSerialized = "{\"Id\":\"\",\"Name\":\"\",\"Uuid\":\"00000000-0000-0000-0000-000000000000\"}";
	
	var examples = new[]{ 
		"{\"Id\":\"\",\"Name\":\"\",\"Uuid\":\"00000000-0000-0000-0000-000000000000\"}",
		"{\"Id\":\"100000000\",\"Name\":\"Some Practice\",\"Uuid\":\"00000000-0000-0000-0000-000000000000\"}",
		"{\"Id\":\"00000000-0000-0000-0000-000000000000\",\"Name\":\"Really long name that tells a short story Practice\",\"Uuid\":\"00000000-0000-0000-0000-000000000000\"}",
		"{\"Id\":\"00000000-0000-0000-0000-000000000000\",\"Name\":\"Really long name that tells a short story Practice ----------------------------------------------100-----------------------------------------------150-----------------------------------------------200-----------------------------------------------250--255\",\"Uuid\":\"00000000-0000-0000-0000-000000000000\"}"
	};
	
	examples.ToList().ForEach(ex => RoundTripEncryption(ex));
}

// You can define other methods, fields, classes and namespaces here
void RoundTripEncryption(string dataToEncrypt){

	dataToEncrypt.Dump("Original text");
	
	var encodedSubjectPublicKey = @"MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4AjwwNvlOx4o5MM+X6oX
NCPwdRa4xDYO3UrHD6A/Hst7x3ymEwYMZqxWXPFc5eVjfFKGvVSBAgvn20lqDE9B
5mLeq/hTfa7yyHyiDFJr/qFd2YvmSg6KJeI+kg3KH8j6l+adBAzmecFyerjJUkBK
x+XfcdfKThsEV8s65JgLO6euuEVSeVzqkpJOYXjxyJMgVGVaHjyAK+a0q6xG6ubz
QWJxGdGBQn9zKCHrpvTJwqDTsPAoJLUuS54m0VwsSFaxuLaMi61bmcS2sR/YwkJt
DxiKl0CNAtSN9Bx7nLL4d72zAsV6hgISfDYFPhJupmZSufRhdq+/5ABPc9Nt8YxD
R5I2CLCdH7RAzorKMDAJjaLTtWY9HvIMr6CIZNO7aCxrQnp604oVTMrvHu3Itq7I
m1NrwbXuNRySPdExlDKhezPI87U+ud3UBkC26yAvkGzKClJrFLy1rzlWYZNXaYx/
DQlOKu4EguUoRwnl+blpp94qddKVzbDAtumNjdQjostkLDEYQpfnQa4Zbx21GyYw
/VOpJvdT6/Q8g0tJ1zIZ1uuXJZoIWT9KBdghQVUbcVWIdzCkpZ0y2RX9zh0h95oR
ZGFSbsyozRDflvEB3nWlrkEGVR8xrvr8wSDSDo1AErJjYoAxEfY5ZLQu2T8HStPv
C94HfCjVQ7e/acUOPCC8VCsCAwEAAQ==
	";
	var subjectPublicKey = Convert.FromBase64String(encodedSubjectPublicKey);
	
	var rsaPublic = RSA.Create();
	rsaPublic.ImportSubjectPublicKeyInfo(subjectPublicKey, out int bytesRead );
	
	var dataByte = Encoding.ASCII.GetBytes(dataToEncrypt);
	var encryptedBytes = rsaPublic.Encrypt(dataByte, RSAEncryptionPadding.OaepSHA256);
	var encodedEncrypted = Convert.ToBase64String(encryptedBytes);
	
	encodedEncrypted.Dump("Encoded encrypted");
	
	var encodedRsaPrivateKey = @"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";
	var rsaPrivateKey = Convert.FromBase64String(encodedRsaPrivateKey);
	
	var rsaPrivate = RSA.Create();
	rsaPrivate.ImportRSAPrivateKey(rsaPrivateKey, out int privateKeyLength );
	
	var encrypted = Convert.FromBase64String(encodedEncrypted);
	var decryptedBytes = rsaPrivate.Decrypt(encrypted, RSAEncryptionPadding.OaepSHA256);
	var decrypted = System.Text.Encoding.Default.GetString(decryptedBytes);
	decrypted.Dump("Decrypted");
}
